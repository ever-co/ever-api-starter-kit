# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Employee {
  id: ID
  firstName: String
  lastName: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean!
  isArchived: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type EmployeeEdge {
  """The node containing the Employee"""
  node: Employee!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type EmployeeConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [EmployeeEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type EmployeeAggregateGroupBy {
  id: ID
  firstName: String
  lastName: String
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  isActive: Boolean
  isArchived: Boolean
}

"""Group by"""
enum GroupBy {
  DAY
  WEEK
  MONTH
  YEAR
}

type EmployeeCountAggregate {
  id: Int
  firstName: Int
  lastName: Int
  createdAt: Int
  updatedAt: Int
  isActive: Int
  isArchived: Int
}

type EmployeeMinAggregate {
  id: ID
  firstName: String
  lastName: String
  createdAt: DateTime
  updatedAt: DateTime
}

type EmployeeMaxAggregate {
  id: ID
  firstName: String
  lastName: String
  createdAt: DateTime
  updatedAt: DateTime
}

type EmployeeAggregateResponse {
  groupBy: EmployeeAggregateGroupBy
  count: EmployeeCountAggregate
  min: EmployeeMinAggregate
  max: EmployeeMaxAggregate
}

type EmployeeDeleteResponse {
  id: ID
  firstName: String
  lastName: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isArchived: Boolean
}

input EmployeeInput {
  id: ID
  firstName: String
  lastName: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean!
  isArchived: Boolean!
}

type Query {
  employeeAggregate(
    """Filter to find records to aggregate on"""
    filter: EmployeeAggregateFilter
  ): [EmployeeAggregateResponse!]!
  employee(
    """The id of the record to find."""
    id: ID!
  ): Employee!
  employees(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: EmployeeFilter! = {}

    """Specify to sort results."""
    sorting: [EmployeeSort!]! = []
  ): EmployeeConnection!
}

input EmployeeAggregateFilter {
  and: [EmployeeAggregateFilter!]
  or: [EmployeeAggregateFilter!]
  id: IDFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  isActive: BooleanFieldComparison
  isArchived: BooleanFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input EmployeeFilter {
  and: [EmployeeFilter!]
  or: [EmployeeFilter!]
  id: IDFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  isActive: BooleanFieldComparison
  isArchived: BooleanFieldComparison
}

input EmployeeSort {
  field: EmployeeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EmployeeSortFields {
  id
  firstName
  lastName
  createdAt
  updatedAt
  isActive
  isArchived
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  createOneEmployee(input: CreateOneEmployeeInput!): Employee!
  createManyEmployees(input: CreateManyEmployeesInput!): [Employee!]!
  updateOneEmployee(input: UpdateOneEmployeeInput!): Employee!
  updateManyEmployees(input: UpdateManyEmployeesInput!): UpdateManyResponse!
  deleteOneEmployee(input: DeleteOneEmployeeInput!): EmployeeDeleteResponse!
  deleteManyEmployees(input: DeleteManyEmployeesInput!): DeleteManyResponse!
}

input CreateOneEmployeeInput {
  """The record to create"""
  employee: CreateEmployee!
}

input CreateEmployee {
  id: ID
  firstName: String
  lastName: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean!
  isArchived: Boolean!
}

input CreateManyEmployeesInput {
  """Array of records to create"""
  employees: [CreateEmployee!]!
}

input UpdateOneEmployeeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateEmployee!
}

input UpdateEmployee {
  id: ID
  firstName: String
  lastName: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isArchived: Boolean
}

input UpdateManyEmployeesInput {
  """Filter used to find fields to update"""
  filter: EmployeeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateEmployee!
}

input EmployeeUpdateFilter {
  and: [EmployeeUpdateFilter!]
  or: [EmployeeUpdateFilter!]
  id: IDFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  isActive: BooleanFieldComparison
  isArchived: BooleanFieldComparison
}

input DeleteOneEmployeeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyEmployeesInput {
  """Filter to find records to delete"""
  filter: EmployeeDeleteFilter!
}

input EmployeeDeleteFilter {
  and: [EmployeeDeleteFilter!]
  or: [EmployeeDeleteFilter!]
  id: IDFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  isActive: BooleanFieldComparison
  isArchived: BooleanFieldComparison
}

type Subscription {
  createdEmployee(input: CreateEmployeeSubscriptionFilterInput): Employee!
  updatedOneEmployee(input: UpdateOneEmployeeSubscriptionFilterInput): Employee!
  updatedManyEmployees: UpdateManyResponse!
  deletedOneEmployee(input: DeleteOneEmployeeSubscriptionFilterInput): EmployeeDeleteResponse!
  deletedManyEmployees: DeleteManyResponse!
}

input CreateEmployeeSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: EmployeeSubscriptionFilter!
}

input EmployeeSubscriptionFilter {
  and: [EmployeeSubscriptionFilter!]
  or: [EmployeeSubscriptionFilter!]
  id: IDFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  isActive: BooleanFieldComparison
  isArchived: BooleanFieldComparison
}

input UpdateOneEmployeeSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: EmployeeSubscriptionFilter!
}

input DeleteOneEmployeeSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: EmployeeSubscriptionFilter!
}